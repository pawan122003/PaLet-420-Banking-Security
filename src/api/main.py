"""\n🔐 PaLet-420 Banking Security - Main FastAPI Application\nEnterprise-Grade Behavioral-Biometric-Driven Dynamic Data Obfuscation Platform\n\nAuthor: pawan122003\nVersion: 1.0.0\nLicense: MIT\n"""\n\nfrom fastapi import FastAPI, HTTPException, Depends, status\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\nfrom fastapi.responses import JSONResponse\nfrom contextlib import asynccontextmanager\nimport uvicorn\nfrom prometheus_client import make_asgi_app\nimport logging\nfrom typing import Dict, Any\n\n# Import routers\nfrom .routers import biometrics, obfuscation, risk_assessment, monitoring\nfrom ..security.auth import get_current_user\nfrom ..utils.logger import setup_logger\nfrom ..utils.config import settings\n\n# Setup logging\nlogger = setup_logger(__name__)\n\n# Lifespan context manager for startup/shutdown\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    logger.info(\"🚀 Starting PaLet-420 Banking Security Platform...\")\n    # Initialize ML models\n    # Initialize Kafka consumers\n    # Connect to Redis cache\n    yield\n    logger.info(\"🛑 Shutting down PaLet-420 Banking Security Platform...\")\n    # Cleanup resources\n\n# Create FastAPI application\napp = FastAPI(\n    title=\"PaLet-420 Banking Security API\",\n    description=\"Enterprise-Grade Behavioral-Biometric-Driven Dynamic Data Obfuscation Platform\",\n    version=\"1.0.0\",\n    docs_url=\"/api/docs\",\n    redoc_url=\"/api/redoc\",\n    openapi_url=\"/api/openapi.json\",\n    lifespan=lifespan\n)\n\n# Security Middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.ALLOWED_ORIGINS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\napp.add_middleware(\n    TrustedHostMiddleware,\n    allowed_hosts=settings.ALLOWED_HOSTS\n)\n\n# Mount Prometheus metrics\nmetrics_app = make_asgi_app()\napp.mount(\"/metrics\", metrics_app)\n\n# Include API routers\napp.include_router(\n    biometrics.router,\n    prefix=\"/api/v1/biometrics\",\n    tags=[\"Biometrics\"],\n    dependencies=[Depends(get_current_user)]\n)\n\napp.include_router(\n    obfuscation.router,\n    prefix=\"/api/v1/obfuscation\",\n    tags=[\"Obfuscation\"],\n    dependencies=[Depends(get_current_user)]\n)\n\napp.include_router(\n    risk_assessment.router,\n    prefix=\"/api/v1/risk\",\n    tags=[\"Risk Assessment\"],\n    dependencies=[Depends(get_current_user)]\n)\n\napp.include_router(\n    monitoring.router,\n    prefix=\"/api/v1/monitoring\",\n    tags=[\"Monitoring\"]\n)\n\n@app.get(\"/\")\nasync def root() -> Dict[str, Any]:\n    \"\"\"Root endpoint with API information.\"\"\"\n    return {\n        \"message\": \"🔐 PaLet-420 Banking Security API\",\n        \"version\": \"1.0.0\",\n        \"status\": \"operational\",\n        \"docs\": \"/api/docs\",\n        \"health\": \"/api/v1/monitoring/health\"\n    }\n\n@app.get(\"/api/v1/health\")\nasync def health_check() -> Dict[str, str]:\n    \"\"\"Health check endpoint.\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"service\": \"palet-420-banking-security\"\n    }\n\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request, exc):\n    logger.error(f\"HTTP Exception: {exc.status_code} - {exc.detail}\")\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"error\": exc.detail}\n    )\n\nif __name__ == \"__main__\":\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        reload=True,\n        log_level=\"info\"\n    )
